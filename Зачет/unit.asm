; 
; ФАМИЛИЯ___________ИМЯ_______ГРУППА_____________

comment ~

зачёт 25.05.2023 (ЗАДАЧА 1)
***************************************************************
Написать программу, состоящую из ДВУХ МОДУЛЕЙ.

В ГОЛОВНОМ МОДУЛЕ должны быть описаны: 
1) числовая константа с именем K и значением из диапазона [1..31]
  (использовать в программе для определённости значение 29); 
2) строка S для вывода сообщения ‘Undivisible’; 
3) двойное слово с именем D (без начального значения); 
4) байт с именем B (без начального значения). 

Во ВСПОМОГАТЕЛЬНОМ МОДУЛЕ должна быть описана процедура IsDivided 
без параметров (и без стандартных соглашений о связях) - подробности
про эту процедуру - см. ниже.

ГОЛОВНОЙ МОДУЛЬ  вводит  значение  ОТЛИЧНОЙ ОТ НУЛЯ беззнаковой  
переменной D (по макрокоманде inint), а затем передаёт управление 
во ВСПОМОГАТЕЛЬНЫЙ МОДУЛЬ на процедуру IsDivided, которая по результатам
проверки величины D должна сформировать значение байта В. Затем ГОЛОВНОЙ 
МОДУЛЬ печатает  полученное значение байта В и на этом завершает свою
работу.

Подробности про процедуру IsDivided.
Процедура, в случае, если величина D делится на 2^K нацело (без остатка), 
а величина (D div (2^K)) при этом помещается в формат байта, должна 
присвоить это значение переменной B.
Во всех остальных случаях (не делится; делится, но при этом не помещается
в байт) процедура должна присвоить переменной В значение 0 и напечатать 
текст, заданный в строке S.
Внимание! Процедура IsDivided не имеет параметров и работает НАПРЯМУЮ 
с переменными D, B, S и константой К (обращаясь к ним по их именам). 

Разъяснение: запись "2^K" обозначает "два в степени К".

Требование к реализации: не использовать арифметических команд.  

******************************************************************************
~

; (unit.asm) Вспомогательный модуль

; ----------------  далее Ваше решение -------------------------
include console.inc
Public IsDivided
Extern K:abs, S:byte, D:dword, B:byte
.data

.code
IsDivided proc
    push EAX
    push EBX
    push ECX
    push EDX
    
    mov ECX, K
    mov EAX, 1
    shl EAX, CL
    mov EBX, D
   
@L:    test EBX, EAX
    jNZ @yes
    shr EBX, 1
    dec CL
    cmp EBX, 0
    jNZ @L
    jmp @no
@yes:
    
@L1:    shr EBX, 1
    jC @no
    loop @L1
    cmp EBX, 256
    jAE @no
    mov B, BL
    jmp @e
    
    
@no:    mov B, 0
    outstrln offset S
    
@e:
    pop EDX
    pop ECX
    pop EBX
    pop EAX
    ret 0

IsDivided endp

end

; ---------------- конец Вашего решения ------------------------

